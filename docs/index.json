[
{
	"uri": "/dsfba_2020/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "People Instructor  Name: Thibault Vatter Email: thibault.vatter@unil.ch Office hours: I am based in New York, so I will not hold office hours, but you can write me to set-up a meeting via Zoom.  Teaching assistants  Aleksandr Shemendyuk Maximilian Aigner Hasini Gunawardena Ilia Azizi  Course Readings There will be no mandatory reading. However, weekly readings related to the lectures are strongly recommended, and additional ressources will undoubtedly be useful.\nEvaluation Evaluation will be based on four assignments (40%) and a final project (60%). For the first three assignments, the platform Ed will be used. For the fourth assignment as well as the project, students will have to provide detailed written reports. Additionally, for the project, students will give a presentation during the last lecture.\nThe final grade will be calculated using the following formula: $$GRADE = \\frac{\\sum_{i=1}^{4} \\frac{HW_i}{4} \\cdot 40 + PR \\cdot 60}{100},$$ where $HW_1$, $HW_2$, $HW_3$, $HW_4$, and $PR$ are respectively the grades for the assignments and final project, on a scale from 0 to 100. This final grade will then be adjusted on a scale from 1 to 6.\nRetake exam The retake consists in asking the failing students to do a new final project and present it.\n"
},
{
	"uri": "/dsfba_2020/lectures/",
	"title": "Lectures",
	"tags": [],
	"description": "",
	"content": "In the third column, references are to chapters from Advanced R (ADVR), R for Data Science (R4DS), and R Markdown: The Definitive Guide (RMD).\n   Date Topic Reading     09/16 Introduction    09/23 Data Structures and Subsetting ADVR 3+4   09/30 Data Structures and Subsetting ADVR 3+4   10/07 Control Flows and Functions ADVR 5+6   10/14 Control Flows and Functions ADVR 5+6   10/21 Data Wrangling R4DS 5, 9-16, 18   10/28 Data Wrangling R4DS 5, 9-16, 18   11/04 Data Wrangling R4DS 5, 9-16, 18   11/11 Visualization and Communication R4DS 3+28, RMD 2   11/18 Visualization and Communication R4DS 3+28, RMD 2   11/25 Presentations/Dashboards/Interactivity RMD 4+5, htmlwidgets   12/02 Guest Lectures    12/09 Projects Coaching    12/16 Projects Presentations     "
},
{
	"uri": "/dsfba_2020/assignments/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": "On this page, you will find information about the homeworks and the project.\nMilestones    Date Assignment     10/06 HW1   10/20 HW2   11/10 HW3   11/10 Project Proposal   12/01 HW4 (Project Update)   12/15 Project Report    "
},
{
	"uri": "/dsfba_2020/ressources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "Getting started with R and Rstudio The CRAN website CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of R and its documentation.\nAn Introduction to R This official and up-to-date tutorial, gives an introduction to the language and how to use R for doing statistical analysis and graphics.\nRStudio RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management.\nRstudio cheat sheets A trove of cheat sheets below to make it easy to learn about and use some of R\u0026rsquo;s most useful packages.\nR packages for data science The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nBooks Advanced R  The book is designed primarily for R users who want to improve their programming skills and understanding of the language. It should also be useful for programmers coming to R from other languages, as it explains some of R’s quirks and shows how some parts that seem horrible do have a positive side. Hadley Wickham  R for Data Science  This book will teach you how to do data science with R: You\u0026rsquo;ll learn how to get your data into R, get it into the most useful structure, transform it, visualise it and model it. In this book, you will find a practicum of skills for data science. Garrett Grolemund and Hadley Wickham  R Markdown: The Definitive Guide  The document format \u0026ldquo;R Markdown\u0026rdquo; was first introduced in the knitr package (Xie 2015, 2020c) in early 2012. The idea was to embed code chunks (of R or other languages) in Markdown documents. In fact, knitr supported several authoring languages from the beginning in addition to Markdown, including LaTeX, HTML, AsciiDoc, reStructuredText, and Textile. Looking back over the five years, it seems to be fair to say that Markdown has become the most popular document format, which is what we expected. Yihui Xie, J. J. Allaire, Garrett Grolemund  Online learning Coding club\u0026rsquo;s tutorials  Our mission is to create a fun and supportive environment where we develop programming and statistics skills together, using R.\nWe want to replace statistics anxiety and code fear with inspiration and motivation to learn, and here we will share our experience.\n Datacamp\u0026rsquo;s free R tutorial and Try R by Code School Both sites provide interactive lessons that will get you writing real code in minutes. They are a great place to make mistakes and test out new skills. You are told immediately when you go wrong and given a chance to fix your code.\nWriting functions in R This course will teach you the fundamentals of writing functions in R so that, among other things, you can make your code more readable, avoid coding errors, and automate repetitive tasks.\nIntroduction to the tidyverse This is an introduction to the dplyr and ggplot2 packages through exploration and visualization of country data over time. This is a suitable course for people who have no or limited experience in R and are interested in learning to perform data analysis.\nData visualisation with ggplot2 Covers the basics of ggplot2. Followed by part 2 which covers more advanced topics.\nExploratory data analysis in R: a case study This course brings ggplot2 and dplyr into action in an in-depth analysis of United Nations voting data. The course also introduces broom for tidying model output and the tidyr package for wrangling data into an explorable shape.\nMisc Easy web applications in R Shiny is an open source R package that provides an elegant and powerful web framework for building web applications using R. Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.\nRcpp for Seamless R and C++ Integration The Rcpp package has become the most widely used language extension for R, the powerful environment and language for computing with data. As of May 2017, 1026 packages on CRAN and a further 91 on BioConductor deploy Rcpp to extend R, to accelerate computations and to connect to other C++ projects.\n"
},
{
	"uri": "/dsfba_2020/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/dsfba_2020/",
	"title": "Data Science for Business Analytics",
	"tags": [],
	"description": "",
	"content": "Data Science for Business Analytics Important information  Registration: fill in this form to register. Zoom link: use this link for the lectures/exercise sessions.  Aim of the course The aim of this course is to learn the most important tools to use data science in a business context, and includes concepts from statistics and computer science:\n Just as a chemist learns how to clean test tubes and stock a lab, you\u0026rsquo;ll learn how to clean data and draw plots and many other things besides. These are the skills that allow data science to happen, and here you will find the best practices for doing each of these things with R. You\u0026rsquo;ll learn how to use the grammar of graphics, literate programming, and reproducible research to save time. You\u0026rsquo;ll also learn how to manage cognitive resources to facilitate discoveries when wrangling, visualizing, and exploring data. Garrett Grolemund and Hadley Wickham  The course will cover the following topics:\n Program  Data structures Control flows Functions   Explore  Data visualization Data transformation Exploratory data analysis   Wrangle  Tidy data Relational data Strings, factors, dates and times   Communicate  Literate programming Graphics for communication    As the class will be hands-on and centered around data, bringing your laptop to lectures and exercise sessions is recommended.\n"
},
{
	"uri": "/dsfba_2020/assignments/hw0/",
	"title": "HW0: R Basics",
	"tags": [],
	"description": "",
	"content": "\rR Foundations\rIn this tutorial, you’ll get an overview of the basic programming concepts in R\rand main data types.\rIt’s just enough to get you up and running essential R code.\rHowever, for true “beginners”, we highly recommend going through Advanced R - Chapter ‘Foundations’ from which the content of this assignment is (mostly) inspired by.\nR, RStudio, Installation\r\rR is a programming language for statistical analysis\rRStudio is the integrated development environment (IDE) for R in which we write and execute R code, plot things and write reports.\rInstallation guidelines and details (Mac, Windows, Linux)\r\rTo follow the tutorial, you can start R Studio and execute statements from the code chunks in the R Console.\n\rLibraries\rR uses different libraries or packages to load specific functions (read excel files, talk to Twitter, generate plots).\n# To install package from the console, note the quotation marks!\r# install.packages(\u0026quot;name_of_package\u0026quot;)\r# load package in environment\rlibrary(mgcv) \rEx. 0\rAs a starting point you can install a package that we’ll extensively use throughout the semester:\n\rtidyverse\r\r\r\rAssignment\rIn R, we assign values (numbers, characters, data frames) to objects (vectors, matrices, variables).\rTo do so, we use the \u0026lt;- operator:\n# name_of_object \u0026lt;- value\ran_object \u0026lt;- 2\ranother_object \u0026lt;- \u0026quot;some string\u0026quot;\r# inspect object\u0026#39;s value\ran_object\r#\u0026gt; [1] 2\rprint(another_object)\r#\u0026gt; [1] \u0026quot;some string\u0026quot;\r\rData Structures\rR’s base data structures can be organised by their dimensionality (1d, 2d, or nd) and whether they’re homogeneous (all contents must be of the same type) or heterogeneous (the contents can be of different types).\n\r\r\rHomogeneous\rHeterogeneous\r\r\r\r1d\rAtomic vector\rList\r\r2d\rMatrix\rData frame\r\rnd\rArray\r\r\r\r\r\rVectors\rThe basic data structure in R is the vector. Vectors can be of two kinds: atomic vectors and lists. They have three common properties:\n\rType, typeof(), what it is.\rLength, length(), how many elements it contains.\rAttributes, attributes(), additional arbitrary metadata.\r\rHowever, atomic vectors and lists differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\nThere are four common types of atomic vectors:\n\rlogical\rinteger\rdouble (often called numeric)\rcharacter\r\rAtomic vectors are usually created with c(), short for combine:\ndbl_var \u0026lt;- c(1, 2.5, 4.5)\r# with the L suffix, you get an integer rather than a double\rint_var \u0026lt;- c(1L, 6L, 10L)\r# use TRUE and FALSE (or T and F) to create logical vectors\rlog_var \u0026lt;- c(TRUE, FALSE, T, F)\rchr_var \u0026lt;- c(\u0026quot;these are\u0026quot;, \u0026quot;some strings\u0026quot;)\rint_var \u0026lt;- c(1L, 6L, 10L)\rtypeof(int_var)\r#\u0026gt; [1] \u0026quot;integer\u0026quot;\ris.integer(int_var)\r#\u0026gt; [1] TRUE\r\rLists\rList objects can hold elements of any type, including lists. You construct lists by using list() instead of c():\nx \u0026lt;- list(1:3, \u0026quot;a\u0026quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9))\rstr(x)\r#\u0026gt; List of 4\r#\u0026gt; $ : int [1:3] 1 2 3\r#\u0026gt; $ : chr \u0026quot;a\u0026quot;\r#\u0026gt; $ : logi [1:3] TRUE FALSE TRUE\r#\u0026gt; $ : num [1:2] 2.3 5.9\r\rAttributes\rAll objects can have arbitrary additional attributes, used to store metadata about the object. Attributes can be thought of as a named list (with unique names). They can be accessed individually with attr() or all at once (as a list) with attributes().\ny \u0026lt;- 1:10\rattr(y, \u0026quot;my_attribute\u0026quot;) \u0026lt;- \u0026quot;This is a vector\u0026quot;\r# inspect the attribute of y\rattr(y, \u0026quot;my_attribute\u0026quot;)\r#\u0026gt; [1] \u0026quot;This is a vector\u0026quot;\r\rMatrices and arrays\rAdding a dim attribute to an atomic vector allows it to behave like a multi-dimensional array. A special case of the array is the matrix, which has two dimensions.\rMatrices and arrays are created with matrix() and array(), or by using the assignment form of dim():\n# two scalar arguments to specify rows and columns\ra \u0026lt;- matrix(1:6, ncol = 3, nrow = 2)\r# one vector argument to describe all dimensions\rb \u0026lt;- array(1:12, c(2, 3, 2))\r# you can also modify an object in place by setting dim()\rc \u0026lt;- 1:6\rdim(c) \u0026lt;- c(3, 2)\rc\r#\u0026gt; [,1] [,2]\r#\u0026gt; [1,] 1 4\r#\u0026gt; [2,] 2 5\r#\u0026gt; [3,] 3 6\rlength() and names() have high-dimensional generalisations:\n\rlength() generalises to nrow() and ncol() for matrices, and dim() for arrays.\n\rnames() generalises to rownames() and colnames() for matrices, and dimnames(), a list of character vectors, for arrays.\n\r\rc() generalises to cbind() and rbind() for matrices, and to abind() (provided by the abind package) for arrays. You can transpose a matrix with t(); the generalised equivalent for arrays is aperm().\nYou can test if an object is a matrix or array using is.matrix() and is.array(), or by looking at the length of the dim(). as.matrix() and as.array() make it easy to turn an existing vector into a matrix or array.\n\rData frames\rA data frame is the most common way of storing data in R, and if used systematically makes data analysis easier. Under the hood, a data frame is a list of equal-length vectors. This makes it a 2-dimensional structure, so it shares properties of both the matrix and the list. This means that a data frame has names(), colnames(), and rownames(), although names() and colnames() are the same thing. The length() of a data frame is the length of the underlying list and so is the same as ncol(); nrow() gives the number of rows.\ndf \u0026lt;- data.frame(x = 1:3, y = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;))\rstr(df)\r#\u0026gt; \u0026#39;data.frame\u0026#39;: 3 obs. of 2 variables:\r#\u0026gt; $ x: int 1 2 3\r#\u0026gt; $ y: chr \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot;\rYou can combine data frames using cbind() and rbind():\ncbind(df, data.frame(z = 3:1))\r#\u0026gt; x y z\r#\u0026gt; 1 1 a 3\r#\u0026gt; 2 2 b 2\r#\u0026gt; 3 3 c 1\r\rSubsetting vectors\rLet’s explore the different types of subsetting with a simple vector, x.\nx \u0026lt;- c(2, 4, 3, 5)\rPositive integers return elements at the specified positions:\nx[c(3, 1)]\r#\u0026gt; [1] 3 2\rDuplicated indices yield duplicated values:\nx[c(1, 1)]\r#\u0026gt; [1] 2 2\rReal numbers are silently truncated to integers:\nx[c(2, 9)]\r#\u0026gt; [1] 4 NA\rNegative integers omit elements at the specified positions:\nx[-c(3, 1)]\r#\u0026gt; [1] 4 5\rYou can’t mix positive and negative integers in a single subset: x[c(-1, 2)] is not allowed.\nLogical vectors select elements where the corresponding logical value is TRUE. This is\rprobably the most useful type of subsetting because you write the expression that creates\rthe logical vector:\nx[c(TRUE, TRUE, FALSE, FALSE)]\r#\u0026gt; [1] 2 4\rx[x \u0026gt; 3]\r#\u0026gt; [1] 4 5\rA missing value in the index always yields a missing value in the output:\nx[c(TRUE, TRUE, NA, FALSE)]\r#\u0026gt; [1] 2 4 NA\rNothing returns the original vector. This is not useful for vectors but is\rvery useful for matrices, data frames, and arrays. It can also be useful in\rconjunction with assignment.\nx[]\r#\u0026gt; [1] 2 4 3 5\rZero returns a zero-length vector. This is not something you usually do on\rpurpose, but it can be helpful for generating test data.\nx[0]\r#\u0026gt; numeric(0)\rIf the vector is named, you can also use character vectors to return elements with matching names:\n(y \u0026lt;- setNames(x, letters[1:4]))\r#\u0026gt; a b c d #\u0026gt; 2 4 3 5\ry[c(\u0026quot;d\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;a\u0026quot;)]\r#\u0026gt; d c a #\u0026gt; 5 3 2\rLike integer indices, you can repeat indices:\ny[c(\u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;)]\r#\u0026gt; a a a #\u0026gt; 2 2 2\rWhen subsetting with [ names are always matched exactly\nz \u0026lt;- c(abc = 1, def = 2)\rz[c(\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;)]\r#\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; #\u0026gt; NA NA\r\rSubsetting lists, matricies and data frames\rSubsetting a list works in the same way as subsetting an atomic vector. Using [ will always return a list;\r[[ and $, as described below, let you pull out the components of the list.\nYou can subset higher-dimensional structures in three ways:\n\rWith multiple vectors.\rWith a single vector.\rWith a matrix.\r\ra \u0026lt;- matrix(1:9, nrow = 3)\rcolnames(a) \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;)\r# multiple vectors\ra[1:2, ]\r#\u0026gt; A B C\r#\u0026gt; [1,] 1 4 7\r#\u0026gt; [2,] 2 5 8\rdf \u0026lt;- data.frame(x = 1:3, y = 3:1, z = letters[1:3])\r# selecting by value of certain vector\rdf[df$x == 2, ]\r#\u0026gt; x y z\r#\u0026gt; 2 2 2 b\r\rImporting data in R\rThe following checklist makes it easier to import data correctly into R:\n\rThe first row is maybe reserved for the header, while the first column is used to identify the sampling unit;\rAvoid names, values or fields with blank spaces, otherwise each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in your data set;\rShort names are preferred over longer names;\rTry to avoid using names that contain symbols such as ?, $,%, ^, \u0026amp;, *, (, ),-,#, ?,,,\u0026lt;,\u0026gt;, /, |, \\, [ ,] ,{, and };\rMake sure that any missing values in your data set are indicated with NA.\r\rlibrary(readr)\r# import data from .txt file\rdf \u0026lt;- read_table(\r\u0026quot;https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.txt\u0026quot;,\rcol_names = FALSE)\rdf\r#\u0026gt; # A tibble: 5 x 3\r#\u0026gt; X1 X2 X3 #\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt;\r#\u0026gt; 1 1 6 a #\u0026gt; 2 2 7 b #\u0026gt; 3 3 8 c #\u0026gt; 4 4 9 d #\u0026gt; 5 5 10 e\r# import data from .csv file\rdf \u0026lt;- read.table(\r\u0026quot;https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.csv\u0026quot;,\rheader = TRUE,\rsep = \u0026quot;,\u0026quot;)\r\rFunctions\rStandard format for defining a function in R:\nmy_function_name \u0026lt;- function(arg1 = \u0026quot;default\u0026quot;, arg2 = \u0026quot;default\u0026quot;) {\r# \u0026#39;cat\u0026#39; is used for concatenating strings\rmerged_string \u0026lt;- cat(arg1, arg2) # if not specified, last evaluated object is returned\rreturn(merged_string) }\r# call a function elsewhere from code\rarg1 \u0026lt;- \u0026quot;Hello\u0026quot;\rarg2 \u0026lt;- \u0026quot;World!\u0026quot;\ra_greeting \u0026lt;- my_function_name(arg1, arg2)\r#\u0026gt; Hello World!\rprint(a_greeting)\r#\u0026gt; NULL\rCRAN - the curated repository of R packages provides millions of functions that you could use to tackle data. You simply need to install a package, and then call the function from your R code function_name(somearguments). For example, the package stats helps you in fitting linear models through the function lm():\nlibrary(stats)\rx \u0026lt;- rnorm(500)\ry \u0026lt;- x*4 + rnorm(500)\rlm.fit \u0026lt;- lm(y~x, data = data.frame(x, y))\rprint(lm.fit)\r#\u0026gt; #\u0026gt; Call:\r#\u0026gt; lm(formula = y ~ x, data = data.frame(x, y))\r#\u0026gt; #\u0026gt; Coefficients:\r#\u0026gt; (Intercept) x #\u0026gt; 0.002114 3.941450\rHow many functions have been used in the example? What does rnorm mean? You can get informed about any R function by using its documentation ?function_name or ?packageName::function_name.\n\rCheat sheets\rBase R Cheat sheet\r\rData Types Cheat sheet\r\r\rTry it yourself!\rExercise 1\rTry to figure out the answers without executing the code. Check your answers in R Studio.\nGiven the vector: x \u0026lt;- c(\"ww\", \"ee\", \"ff\", \"uu\", \"kk\"), what will be the output for x[c(2,3)] ?\n\rLet a \u0026lt;- c(2, 4, 6, 8) and b \u0026lt;- c(TRUE, FALSE, TRUE, FALSE), what will be the output for the R expression max(a[b])?\n\rIs it possible to apply the function my_function_name using x and a as arguments?\n\r\r\rExercise 2\rConsider a vector x such that:\rx \u0026lt;- c(1, 3, 4, 7, 11, 18, 29)\rWrite an R statement that will return a list X2 with components of value:\rx*2, x/2, sqrt(x) and names ‘x*2’, ‘x/2’, ‘sqrt(x)’.\n\rExercise 3\rRead the file Table0.txt into an object DS.\nWhat is the data type for the object DS?\rChange the names of the columns to Name, Age, Height, Weight and Sex.\rChange the row names so that they are the same as Name, and remove the variable Name.\rGet the number of rows and columns of the data.\r\r\rExercise 4\rConvert DS from the previous exercise to a data frame DF.\rAdd an additional column “zeros” in DF with all elements 0.\rRemove the Weight column from DF.\r\r\r\r\r"
},
{
	"uri": "/dsfba_2020/assignments/hw1-2-3/",
	"title": "HW1-2-3: R Programming an Data Wrangling",
	"tags": [],
	"description": "",
	"content": "\rThe first three assignments will have to be completed in Ed:\n\rHomework 1\r\r"
},
{
	"uri": "/dsfba_2020/assignments/hw3/",
	"title": "HW3: Many models",
	"tags": [],
	"description": "",
	"content": "\rDownload the HW3 skeleton files. To successfully complete the first assignment you\rwill have to do the following:\nFollowing the instructions below, complete missing code in chunks in report/eda.Rmd, report/swiss_model.Rmd, and report/many_models.Rmd.\rAdd your name and build the final report using index.Rmd.\r\rTo obtain the maximum number of points, use whenever possible:\n\rthe pipeline symbol %\u0026gt;%,\rdplyr verbs,\rkable to print tables,\rggplot to produce the figures,\rpurrr’s functions to minimize code duplication,\rbroom’s functions to format the results model fits.\r\rAlso:\n\rPay attention to the general aesthetics of your report (i.e., formatting of\rthe tables, sizing of the figures, etc.).\rUse inline code to display single numbers, and echo = FALSE for code chunks when you display\ra table of produce a figure (i.e., we don’t want to see code unless it is necessary).\rMinimize the amount of code duplication by using iterations concepts and list-columns.\rComment your code to explain what you are doing.\r\rThe solutions for HW3 are available here.\n"
},
{
	"uri": "/dsfba_2020/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]